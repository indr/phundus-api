// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34011
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Phundus.Core.Specs.Inventory.Management.Stock
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Allocation")]
    public partial class AllocationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Allocation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Allocation", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("stock created \"Stock-1\", article 10001, organization 1001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("quantity in inventory increased of 10 to 10 as of 07.01.2015", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allocate stock publishes stock allocated and updates allocations")]
        public virtual void AllocateStockPublishesStockAllocatedAndUpdatesAllocations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allocate stock publishes stock allocated and updates allocations", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 8
 testRunner.When("allocate stock, allocation id 2, reservation id 3, from 07.01.2015 to 08.01.2015," +
                    " quantity 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("stock allocated 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AllocationId",
                        "ReservationId",
                        "FromUtc",
                        "ToUtc",
                        "Quantity"});
            table1.AddRow(new string[] {
                        "2",
                        "3",
                        "07.01.2015",
                        "08.01.2015",
                        "11"});
#line 10
 testRunner.And("allocations", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allocate stock changes availability")]
        public virtual void AllocateStockChangesAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allocate stock changes availability", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 15
 testRunner.When("allocate stock, allocation id 2, reservation id 3, from 08.01.2015 to 09.01.2015," +
                    " quantity 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("stock allocated 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("quantity available changed from 08.01.2015 to 09.01.2015 of -11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AsOfUtc",
                        "Change",
                        "Total"});
            table2.AddRow(new string[] {
                        "07.01.2015",
                        "10",
                        "10"});
            table2.AddRow(new string[] {
                        "08.01.2015",
                        "-11",
                        "-1"});
            table2.AddRow(new string[] {
                        "09.01.2015",
                        "11",
                        "10"});
#line 18
 testRunner.And("quantities available", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change allocation quantity updates allocations")]
        public virtual void ChangeAllocationQuantityUpdatesAllocations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change allocation quantity updates allocations", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 25
 testRunner.Given("stock allocated, allocation id 1, reservation id 2, from 07.01.2015 to 08.01.2015" +
                    ", quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When("change allocation quantity, allocation id 1, new quantity 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("allocation quantity changed, allocation id 1, new quantity 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AllocationId",
                        "ReservationId",
                        "FromUtc",
                        "ToUtc",
                        "Quantity"});
            table3.AddRow(new string[] {
                        "1",
                        "2",
                        "07.01.2015",
                        "08.01.2015",
                        "3"});
#line 28
 testRunner.And("allocations", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change allocation quantity updates availabilities")]
        public virtual void ChangeAllocationQuantityUpdatesAvailabilities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change allocation quantity updates availabilities", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 33
 testRunner.Given("stock allocated, allocation id 1, reservation id 2, from 08.01.2015 to 09.01.2015" +
                    ", quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("change allocation quantity, allocation id 1, new quantity 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("allocation quantity changed, allocation id 1, new quantity 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("quantity available changed from 08.01.2015 to 09.01.2015 of -2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "AsOfUtc",
                        "Change",
                        "Total"});
            table4.AddRow(new string[] {
                        "07.01.2015",
                        "10",
                        "10"});
            table4.AddRow(new string[] {
                        "08.01.2015",
                        "-3",
                        "7"});
            table4.AddRow(new string[] {
                        "09.01.2015",
                        "3",
                        "10"});
#line 37
 testRunner.And("quantities available", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change allocation period updates allocations")]
        public virtual void ChangeAllocationPeriodUpdatesAllocations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change allocation period updates allocations", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 44
 testRunner.Given("stock allocated, allocation id 1, reservation id 2, from 07.01.2015 to 08.01.2015" +
                    ", quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.When("change allocation period, allocation id 1, new from 08.01.2015 to 09.01.2015", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("allocation period changed, allocation id 1, new from 08.01.2015 to 09.01.2015", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "AllocationId",
                        "ReservationId",
                        "FromUtc",
                        "ToUtc",
                        "Quantity"});
            table5.AddRow(new string[] {
                        "1",
                        "2",
                        "08.01.2015",
                        "09.01.2015",
                        "1"});
#line 47
 testRunner.And("allocations", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change allocation period updates availabilities")]
        public virtual void ChangeAllocationPeriodUpdatesAvailabilities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change allocation period updates availabilities", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 52
 testRunner.Given("stock allocated, allocation id 1, reservation id 2, from 07.01.2015 to 08.01.2015" +
                    ", quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.When("change allocation period, allocation id 1, new from 09.01.2015 to 10.01.2015", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("allocation period changed, allocation id 1, new from 09.01.2015 to 10.01.2015", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("quantity available changed from 07.01.2015 to 08.01.2015 of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("quantity available changed from 09.01.2015 to 10.01.2015 of -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "AsOfUtc",
                        "Change",
                        "Total"});
            table6.AddRow(new string[] {
                        "07.01.2015",
                        "10",
                        "10"});
            table6.AddRow(new string[] {
                        "09.01.2015",
                        "-1",
                        "9"});
            table6.AddRow(new string[] {
                        "10.01.2015",
                        "1",
                        "10"});
#line 57
 testRunner.And("quantities available", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Discard allocation updates allocations")]
        public virtual void DiscardAllocationUpdatesAllocations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discard allocation updates allocations", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 64
 testRunner.Given("stock allocated, allocation id 1, reservation id 2, from 07.01.2015 to 08.01.2015" +
                    ", quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When("discarding allocation allocation id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("allocation discarded allocation id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("allocations is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Discard allocation updates availability")]
        public virtual void DiscardAllocationUpdatesAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discard allocation updates availability", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 70
 testRunner.Given("stock allocated, allocation id 1, reservation id 2, from 07.01.2015 to 08.01.2015" +
                    ", quantity 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.When("discarding allocation allocation id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
 testRunner.Then("allocation discarded allocation id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
 testRunner.And("quantity available changed from 07.01.2015 to 08.01.2015 of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "AsOfUtc",
                        "Change",
                        "Total"});
            table7.AddRow(new string[] {
                        "07.01.2015",
                        "10",
                        "10"});
#line 74
 testRunner.And("quantities available", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
