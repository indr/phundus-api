// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34011
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Phundus.Core.Specs.Inventory.ReservationAndAvailability
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Availability")]
    public partial class AvailabilityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Availability.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Availability", "In order to avoid silly mistakes\nAs a math idiot\nI want to be told the sum of two" +
                    " numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No reservations")]
        public virtual void NoReservations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No reservations", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("an article with gross stock of 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("now is 16.08.2014 10:00:00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I ask for availability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "Amount"});
            table1.AddRow(new string[] {
                        "16.08.2014 00:00:00",
                        "2"});
#line 10
 testRunner.Then("the result should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One reservation in the future")]
        public virtual void OneReservationInTheFuture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One reservation in the future", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("an article with gross stock of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("now is 16.08.2014 10:00:00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "ToUtc",
                        "Amount"});
            table2.AddRow(new string[] {
                        "18.08.2014 00:00:00",
                        "19.08.2014 23:59:59",
                        "1"});
#line 17
 testRunner.And("these reservations exists", ((string)(null)), table2, "And ");
#line 20
 testRunner.When("I ask for availability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "Amount"});
            table3.AddRow(new string[] {
                        "16.08.2014 00:00:00",
                        "1"});
            table3.AddRow(new string[] {
                        "18.08.2014 00:00:00",
                        "0"});
            table3.AddRow(new string[] {
                        "20.08.2014 00:00:00",
                        "1"});
#line 21
 testRunner.Then("the result should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One reservation in the past")]
        public virtual void OneReservationInThePast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One reservation in the past", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("an article with gross stock of 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.And("now is 16.08.2014 10:00:00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "ToUTc",
                        "Amount"});
            table4.AddRow(new string[] {
                        "13.08.2014 00:00:00",
                        "14:08:2014 23:59:59",
                        "2"});
#line 30
 testRunner.And("these reservations exists", ((string)(null)), table4, "And ");
#line 33
 testRunner.When("I ask for availability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "Amount"});
            table5.AddRow(new string[] {
                        "16.08.2014 00:00:00",
                        "2"});
#line 34
 testRunner.Then("the result should be", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple reservations")]
        public virtual void MultipleReservations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple reservations", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("an article with gross stock of 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("now is 16.08.2014 10:00:00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "ToUtc",
                        "Amount"});
            table6.AddRow(new string[] {
                        "14.08.2014 00:00:00",
                        "15.08.2014 23:59:59",
                        "1"});
            table6.AddRow(new string[] {
                        "14.08.2014 22:00:00",
                        "16.08.2014 21:59:59",
                        "1"});
            table6.AddRow(new string[] {
                        "17.08.2014 00:00:00",
                        "19.08.2014 23:59:59",
                        "2"});
            table6.AddRow(new string[] {
                        "18.08.2014 00:00:00",
                        "20.08.2014 23:59:59",
                        "3"});
#line 41
 testRunner.And("these reservations exists", ((string)(null)), table6, "And ");
#line 47
 testRunner.When("I ask for availability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromUtc",
                        "Amount"});
            table7.AddRow(new string[] {
                        "16.08.2014 00:00:00",
                        "4"});
            table7.AddRow(new string[] {
                        "16.08.2014 22:00:00",
                        "5"});
            table7.AddRow(new string[] {
                        "17.08.2014 00:00:00",
                        "3"});
            table7.AddRow(new string[] {
                        "18.08.2014 00:00:00",
                        "0"});
            table7.AddRow(new string[] {
                        "20.08.2014 00:00:00",
                        "2"});
            table7.AddRow(new string[] {
                        "21.08.2014 00:00:00",
                        "5"});
#line 48
 testRunner.Then("the result should be", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
