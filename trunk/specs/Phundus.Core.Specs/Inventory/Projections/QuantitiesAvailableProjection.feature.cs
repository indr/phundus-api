// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34011
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Phundus.Core.Specs.Inventory.Projections
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("QuantitiesAvailableProjection")]
    public partial class QuantitiesAvailableProjectionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QuantitiesAvailableProjection.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "QuantitiesAvailableProjection", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("stock created \"Stock1\", article 10001, organization 1001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("stock created \"Stock2\", article 10001, organization 1001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes not overlapping")]
        public virtual void TwoChangesNotOverlapping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes not overlapping", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 8
 testRunner.Given("quantity available changed from 09.11.2014 to 12.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table1.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
            table1.AddRow(new string[] {
                        "Stock1",
                        "12.11.2014",
                        "0"});
            table1.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "3"});
            table1.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "0"});
#line 11
 testRunner.Then("quantities available data", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes overlapping at the end of first")]
        public virtual void TwoChangesOverlappingAtTheEndOfFirst()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes overlapping at the end of first", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 19
 testRunner.Given("quantity available changed from 09.11.2014 to 15.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table2.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
            table2.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "5"});
            table2.AddRow(new string[] {
                        "Stock1",
                        "15.11.2014",
                        "3"});
            table2.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "0"});
#line 22
 testRunner.Then("quantities available data", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes overlapping at the start of first")]
        public virtual void TwoChangesOverlappingAtTheStartOfFirst()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes overlapping at the start of first", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 30
 testRunner.Given("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("quantity available changed from 09.11.2014 to 15.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table3.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
            table3.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "5"});
            table3.AddRow(new string[] {
                        "Stock1",
                        "15.11.2014",
                        "3"});
            table3.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "0"});
#line 33
 testRunner.Then("quantities available data", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes with same from date")]
        public virtual void TwoChangesWithSameFromDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes with same from date", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 41
 testRunner.Given("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.And("quantity available changed from 14.11.2014 to 15.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table4.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "5"});
            table4.AddRow(new string[] {
                        "Stock1",
                        "15.11.2014",
                        "3"});
            table4.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "0"});
#line 44
 testRunner.Then("quantities available data", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes with same to date")]
        public virtual void TwoChangesWithSameToDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes with same to date", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 51
 testRunner.Given("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("quantity available changed from 12.11.2014 to 16.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table5.AddRow(new string[] {
                        "Stock1",
                        "12.11.2014",
                        "2"});
            table5.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "5"});
            table5.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "0"});
#line 54
 testRunner.Then("quantities available data", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes enclosing the first")]
        public virtual void TwoChangesEnclosingTheFirst()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes enclosing the first", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 61
 testRunner.Given("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.And("quantity available changed from 09.11.2014 to 18.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table6.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
            table6.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "5"});
            table6.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "2"});
            table6.AddRow(new string[] {
                        "Stock1",
                        "18.11.2014",
                        "0"});
#line 64
 testRunner.Then("quantities available data", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two changes inner the first")]
        public virtual void TwoChangesInnerTheFirst()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two changes inner the first", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 72
 testRunner.Given("quantity available changed from 09.11.2014 to 18.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.And("quantity available changed from 14.11.2014 to 16.11.2014 of 3 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table7.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
            table7.AddRow(new string[] {
                        "Stock1",
                        "14.11.2014",
                        "5"});
            table7.AddRow(new string[] {
                        "Stock1",
                        "16.11.2014",
                        "2"});
            table7.AddRow(new string[] {
                        "Stock1",
                        "18.11.2014",
                        "0"});
#line 75
 testRunner.Then("quantities available data", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple stocks support")]
        public virtual void MultipleStocksSupport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple stocks support", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 83
 testRunner.Given("quantity available changed from 09.11.2014 to 12.11.2014 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.And("quantity available changed from 01.12.2015 to 10.12.2015 of 3 in Stock2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table8.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
            table8.AddRow(new string[] {
                        "Stock1",
                        "12.11.2014",
                        "0"});
#line 86
 testRunner.Then("quantities available data", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DateTime.MaxValue support")]
        public virtual void DateTime_MaxValueSupport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DateTime.MaxValue support", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 92
 testRunner.Given("quantity available changed from 09.11.2014 to 31.12.9999 23:59:59 of 2 in Stock1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.When("I ask for quantities available in stock \"Stock1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "StockId",
                        "AsOfUtc",
                        "Quantity"});
            table9.AddRow(new string[] {
                        "Stock1",
                        "09.11.2014",
                        "2"});
#line 94
 testRunner.Then("quantities available data", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
