<?xml version="1.0"?>
<!--
 * Copyright 2011 Reto Inderbitzin, phiNdus.ch
 *
-->
<project name="fundus" default="help">
  <property name="verbose" value="false" />
  <property name="build.number" value="0.0.0.0" unless="${property::exists('build.number')}" />
  <property name="failonerror" value="true" unless="${property::exists('failonerror')}" />
  
  <property name="platform" value="anycpu" />
  <property name="machine" value="${dns::get-host-name()}" />
  
  <!--
    Base directories
  -->
  <property name="base.dir" value="." />
  <property name="config.dir" value="${base.dir}\config" />
  <property name="lib.dir" value="${base.dir}\lib" />
  <property name="src.dir" value="${base.dir}\src" />
  <property name="sql.dir" value="${base.dir}\sql" />
  <property name="build.dir" value="${base.dir}\build" />
  <property name="tests.dir" value="${base.dir}\tests" />
  <property name="tools.dir" value="${base.dir}\tools" />
  <property name="artifacts.dir" value="${base.dir}\artifacts" />
  
  <!--
    Target directories
  -->
  <property name="bin.dir" value="${build.dir}\bin" />
  <property name="website.dir" value="${build.dir}\website" />
  <property name="dist.dir" value="${build.dir}\dist" />
  <property name="reports.dir" value="${build.dir}\reports" />
    
  <!--
    Tools directories
  -->
  <property name="nunit.dir" value="${tools.dir}\NUnit" />
  <property name="partcover.dir" value="${tools.dir}\PartCover" />
  <property name="reportgenerator.dir" value="${tools.dir}\ReportGenerator" />
  <property name="msbuild.dir" value="${path::get-full-path(tools.dir + '\MSBuild')}" />
  <property name="nantcontrib.dir" value="${tools.dir}\nantcontrib" />
  <property name="corflags.dir" value="${tools.dir}" />
  <property name="fxcop.dir" value="${tools.dir}\FxCop" />
  <property name="rhino-mocks.dir" value="${tools.dir}\Rhino.Mocks" />
  
  <!--
    Libraries directories
  -->
  <property name="castle-windsor.dir" value="${lib.dir}\Castle.Windsor" />
  <property name="mvc-3.dir" value="${lib.dir}\ASP.NET MVC 3"/>
  <property name="asp-net-web-pages.dir" value="${lib.dir}\ASP.NET Web Pages" />
  <property name="nhibernate.dir" value="${lib.dir}\NHibernate" />
  
  
  <!--
    Include property files:
      1. Default build properties
      2. Based on machine name. This is important for TeamCity Build Agents.
      3. Local properties: Don't but this file under version control
         Use Default.build.properties as template for your dev env
  -->
  <include buildfile="Default.build.properties" verbose="true" />
  <include buildfile="${machine + '.build.properties'}" if="${file::exists(machine + '.build.properties')}" verbose="true" />
  <include buildfile="Local.build.properties" if="${file::exists('Local.build.properties')}" verbose="true" />  
  
  <!--
    Prepare nant/nant contrib
  -->
  <loadtasks assembly="${nantcontrib.dir}\NAnt.Contrib.Tasks.dll" />
  
  
  <target name="help">
    <echo>Available targets:
    
clean:
  Cleans output and solution folders

init:
  Creates output folders and AssemblyInfo files

build:
  Compiles solution    

unit-test:
  Runs unit tests

init-integration-test:
  Prepares integration database and application configuration files

integration-test:
  Runs integration tests

commit-stage:
  Runs all the targets above and publishes artifacts for later
  stages in the deployment pipeline
    </echo>
    
    <fail message="No target specified." />
  </target>
  
  <target name="clean">
    <delete dir="${build.dir}" verbose="${verbose}" />
    <delete>
      <fileset>
        <include name="${src.dir}\**\AssemblyInfo.cs" />
        <include name="${src.dir}\**\bin\**" />
        <include name="${src.dir}\**\obj\**" />
        <include name="${tests.dir}\**\AssemblyInfo.cs" />
        <include name="${tests.dir}\**\bin\**" />
        <include name="${tests.dir}\**\obj\**" />
      </fileset>
    </delete>
  </target>
  
  <target name="init" depends="clean">
    <mkdir dir="${build.dir}" verbose="${verbose}" />
    <mkdir dir="${reports.dir}" verbose="${verbose}" />
    
    <property name="assembly.title" value="Core-Environment" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="21035e24-d5c4-4c8a-82ba-7903da246e69" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Environment\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>    
    
    <property name="assembly.title" value="Core-Domain" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="52a78ccd-cf4c-4567-8040-6f712a7eeb74" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Domain\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Business" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="8f4ec48d-ceec-4008-9391-26956335493d" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Business\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Web" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="fc2dfb3c-500b-4709-ad3b-bb36eedef0f5" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Web\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Environment-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="9f068397-99d3-4442-ba1d-b5b854a5e688" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Environment.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Domain-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="615cd7e5-2292-42fa-8764-0a05cb46c214" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Domain.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>    
    
    <property name="assembly.title" value="Core-Domain-IntegrationTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="615cd7e5-2292-42fa-8764-0a05cb46c214" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Domain.IntegrationTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="Core-Business-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="19d6b1f4-9bd6-4ee8-91c2-be2977a13fb8" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Business.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="Core-Business-IntegrationTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="58C99E38-EB57-4190-9CF1-01CE75A1B738" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Business.IntegrationTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="Core-Web-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="453b1282-6fe5-43f3-8563-066c9f2a94fa" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Web.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="SmokeTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="8d5c9f9d-1fd6-44ae-8286-b8c0900fd1ae" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${tests.dir}\phiNdus.fundus.SmokeTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="AcceptanceTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="1fcb1ebf-1bda-4977-a7fb-ac748a7f0d47" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${tests.dir}\phiNdus.fundus.AcceptanceTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>  
    
    <property name="assembly.title" value="CliTools" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="be75437a-285e-4eba-b88a-5b2627a94e54" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.CliTools\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>  
  </target>
  
  <target name="build" depends="init">
    <msbuild project="${base.dir}\phiNdus.fundus.Core.sln" verbosity="Normal">
      <property name="Configuration" value="Debug" />
      <property name="OutputPath" value="${path::get-full-path(bin.dir)}" />
      <property name="MSBuildExtensionsPath32" value="${msbuild.dir}" />
    </msbuild>
    
    <delete>
      <fileset>
         <include name="${bin.dir}\**\*.config" />
      </fileset>
    </delete>
    
    <zip zipfile="${artifacts.dir}\AcceptanceTests.zip">
      <fileset basedir="${bin.dir}">
        <include name="**\*" />
        <exclude name="_PublishedWebsites\" />
        <exclude name="**\*UnitTests*" />
        <exclude name="**\*IntegrationTests*" />
        <exclude name="**\*ComponentTests*" />
        <exclude name="**\*.sql" />
        <exclude name="**\*SmokeTests*" />
      </fileset>
    </zip>
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\AcceptanceTests.zip']" />
    
    <zip zipfile="${artifacts.dir}\SmokeTests.zip">
      <fileset basedir="${bin.dir}">
        <include name="**\nunit*" />
        <include name="**\*SmokeTests*" />
      </fileset>
    </zip>
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\SmokeTests.zip']" />
    
    <zip zipfile="${artifacts.dir}\Website.zip">
      <fileset basedir="${bin.dir}\_PublishedWebsites\phiNdus.fundus.Core.Web">
        <include name="**\*" />
        <exclude name="*.config" />
      </fileset>
    </zip>
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\Website.zip']" />
  </target>
  
  <target name="unit-test" depends="build">
    <property name="teamcity.dotnet.nant.nunit2.platform" value="x86" />
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.UnitTests.dll" />
        </assemblies>
      </test>
    </nunit2>
  </target>
  
  <target name="init-integration-test" depends="build">
    <property name="sql.database-name" value="${integration.database-name}" />
    <property name="sql.connstring" value="Provider=SQLOLEDB; Data Source=${integration.data-source}; Integrated Security=SSPI" />
    
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/create.sql"
    />
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/ddl.sql"
    />
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml.sql"
    />
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml-integration.sql"
    />
    
    <property name="app.config.connstrings.default.connstring" value="${integration.connstring}" />
    <property name="app.config.connstrings.default.providername" value="${integration.providername}" />
    
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.IntegrationTests.dll" />
          <include name="${bin.dir}\*.ComponentTests.dll" />
        </items>
      </in>
      <do>
        <copy file="${config.dir}/App.config.template"
              tofile="${bin.dir + '/' + path::get-file-name(filename) + '.config'}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
      </do>
    </foreach>
  </target>
  
  <target name="integration-test" depends="init-integration-test">
    <property name="teamcity.dotnet.nant.nunit2.platform" value="x86" />
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.IntegrationTests.dll" />
          <include name="${bin.dir}\*.ComponentTests.dll" />
        </assemblies>
      </test>
    </nunit2>
  </target>
  
  <target name="init-acceptance-test">
    <call target="deploy-acceptance" cascade="false" />
    
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.AcceptanceTests.dll" />
        </items>
      </in>
      <do>
        <copy file="${config.dir}/AcceptanceTests.App.config.template"
              tofile="${bin.dir + '/' + path::get-file-name(filename) + '.config'}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
      </do>
    </foreach>
  </target>
  
  <target name="acceptance-test" depends="init-acceptance-test">
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.AcceptanceTests.dll" />
        </assemblies>
      </test>
    </nunit2>  
  </target>
  
  <target name="commit-stage" depends="build unit-test integration-test">
    
  </target>
  
  <target name="acceptance-stage" depends="clean">
    <fail if="${not file::exists(artifacts.dir + '\AcceptanceTests.zip')}" message="Artifact AcceptanceTests.zip not found." />
    <fail if="${not file::exists(artifacts.dir + '\Website.zip')}" message="Artifact Website.zip not found." />
    
    <unzip zipfile="${artifacts.dir}\AcceptanceTests.zip" todir="${bin.dir}" />
    <unzip zipfile="${artifacts.dir}\Website.zip" todir="${website.dir}" />
    
    <call target="acceptance-test" cascade="true" />
  </target>
  
  <target name="deploy-acceptance">
    <property name="sql.database-name" value="${acceptance.database-name}" />
    <property name="sql.connstring" value="Provider=SQLOLEDB; Data Source=${integration.data-source}; Integrated Security=SSPI" />
    <property name="web.config.connstrings.default.connstring" value="${acceptance.connstring}" />
    <property name="web.config.connstrings.default.providername" value="${acceptance.providername}" />
    <property name="deploy.dir" value="${acceptance.dir}" />
    <property name="deploy.iisserver" value="${acceptance.iisserver}" />
    <property name="deploy.vdir" value="${acceptance.vdir}" />
    <property name="deploy.dml" value="${base.dir}/sql/dml-acceptance.sql" />
    <call target="deploy" cascade="false" />
  </target>
  
  <target name="deploy-staging">
    <property name="sql.database-name" value="${staging.database-name}" />
    <property name="sql.connstring" value="Provider=SQLOLEDB; Data Source=${integration.data-source}; Integrated Security=SSPI" />
    <property name="web.config.connstrings.default.connstring" value="${staging.connstring}" />
    <property name="web.config.connstrings.default.providername" value="${staging.providername}" />
    <property name="deploy.dir" value="${staging.dir}" />
    <property name="deploy.iisserver" value="${staging.iisserver}" />
    <property name="deploy.vdir" value="${staging.vdir}" />
    <property name="deploy.dml" value="${base.dir}/sql/dml-staging.sql" />
    <call target="deploy" cascade="false" />
  </target>
  
  <target name="init-deploy">
    <fail if="${not file::exists(artifacts.dir + '\SmokeTests.zip')}" message="Artifact SmokeTests.zip not found." />
    <unzip zipfile="${artifacts.dir}\SmokeTests.zip" todir="${bin.dir}" />
  </target>
  
  <target name="deploy" depends="init-deploy">
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/create.sql" />
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/ddl.sql" />
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml.sql" />
    <if test="${deploy.dml != ''}">
      <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
        transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
        source="${deploy.dml}" />
    </if>
    
    <copy file="${config.dir}/Web.config.template"
          tofile="${website.dir}/Web.config">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <copy file="${config.dir}/Views.Web.config.template"
          tofile="${website.dir}/Views/Web.config">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>

    <!--<deliisdir vdirname="${deploy.vdir}" />
    <mkiisdir></mkiisdir> -->
    <delete dir="${deploy.dir}" />
    <mkdir dir="${deploy.dir}" />

    <!-- http://msdn.microsoft.com/en-us/library/ms229863%28VS.80%29.aspx -->
    <exec program="${framework::get-tool-path('aspnet_compiler.exe')}" verbose="true"
      commandline="-v &quot;${deploy.vdir}&quot; -p &quot;${website.dir}&quot; &quot;${deploy.dir}&quot; -nologo" />
      
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.SmokeTests.dll" />
        </items>
      </in>
      <do>
        <copy file="${config.dir}/SmokeTests.App.config.template"
              tofile="${bin.dir + '/' + path::get-file-name(filename) + '.config'}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
      </do>
    </foreach>
      
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.SmokeTests.dll" />
        </assemblies>
      </test>
    </nunit2>  
  </target>
  

  
  <!--
    TARGET: FXCOP
  -->
  <target name="fxcop" depends="build">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}/phiNdus.*.dll" />
          <exclude name="${bin.dir}/*Tests.dll" />
        </items>
      </in>
      <do>
        <exec program="${fxcop.dir}/FxCopCmd.exe"
          commandline="/f:&quot;${filename}&quot; /out:&quot;${reports.dir}/${path::get-file-name(filename)}-FxCop.xml&quot;"
        />
        <echo message="##teamcity[importData type='FxCop' path='${reports.dir}/${path::get-file-name(filename)}-FxCop.xml']" />
      </do>
    </foreach>
  </target>
  
  
  
  <target name="init-part-cover">
    <exec program="${corflags.dir}/CorFlags.exe"
      commandline="&quot;${partcover.dir}/PartCover.exe&quot; /32BIT+ /Force /nologo" />
    <!--
    <exec program="${corflags.dir}/CorFlags.exe"
      commandline="&quot;${partcover.dir}/PartCover.Browser.exe&quot; /32BIT+ /Force /nologo" />      
    -->
    <regasm>
      <assemblies>
        <include name="${partcover.dir}/PartCover.exe" />
        <include name="${partcover.dir}/PartCover.Browser.exe" />
  
        <include name="${partcover.dir}/Interop.PartCover.dll" />
        <include name="${partcover.dir}/PartCover.dll" />
        <include name="${partcover.dir}/PartCover.CorDriver.dll" />
        <include name="${partcover.dir}/PartCover.Framework.dll" />
      </assemblies>
    </regasm>
  </target>
</project>
