<?xml version="1.0"?>
<!--
 * Copyright 2011 Reto Inderbitzin, phiNdus.ch
 *
-->
<project name="fundus" default="help">
  <property name="verbose" value="false" />
  <property name="build.number" value="0.0.0.0" unless="${property::exists('build.number')}" />
  <property name="failonerror" value="true" unless="${property::exists('failonerror')}" />
  
  <property name="platform" value="anycpu" />
  <property name="machine" value="${dns::get-host-name()}" />
  
  <!--
    Base directories
  -->
  <property name="base.dir" value="." />
  <property name="config.dir" value="${base.dir}/config" />
  <property name="lib.dir" value="${base.dir}/lib" />
  <property name="src.dir" value="${base.dir}/src" />
  <property name="sql.dir" value="${base.dir}/sql" />
  <property name="build.dir" value="${base.dir}/build" />
  <property name="tests.dir" value="${base.dir}/tests" />
  <property name="tools.dir" value="${base.dir}/tools" />
  
  <!--
    Target directories
  -->
  <property name="bin.dir" value="${build.dir}/bin" />
  <property name="web.dir" value="${build.dir}/web" />
  <property name="dist.dir" value="${build.dir}/dist" />
  <property name="reports.dir" value="${build.dir}/reports" />
    
  <!--
    Tools directories
  -->
  <property name="nunit.dir" value="${tools.dir}/NUnit" />
  <property name="partcover.dir" value="${tools.dir}/PartCover" />
  <property name="reportgenerator.dir" value="${tools.dir}/ReportGenerator" />
  <property name="nantcontrib.dir" value="${tools.dir}/nantcontrib" />
  <property name="corflags.dir" value="${tools.dir}" />
  <property name="fxcop.dir" value="${tools.dir}/FxCop" />
  <property name="rhino-mocks.dir" value="${tools.dir}/Rhino.Mocks" />
  
  <!--
    Libraries directories
  -->
  <property name="castle-windsor.dir" value="${lib.dir}/Castle.Windsor" />
  <property name="mvc-3.dir" value="${lib.dir}/ASP.NET MVC 3"/>
  <property name="asp-net-web-pages.dir" value="${lib.dir}/ASP.NET Web Pages" />
  <property name="nhibernate.dir" value="${lib.dir}/NHibernate" />
  
  
  <!--
    Include property files:
      1. Default build properties
      2. Based on machine name. This is important for TeamCity Build Agents.
      3. Local properties: Don't but this file under version control
         Use Default.build.properties as template for your dev env
  -->
  <include buildfile="Default.build.properties" verbose="true" />
  <include buildfile="${machine + '.build.properties'}" if="${file::exists(machine + '.build.properties')}" verbose="true" />
  <include buildfile="Local.build.properties" if="${file::exists('Local.build.properties')}" verbose="true" />  
  
  <!--
    Prepare nant/nant contrib
  -->
  <loadtasks assembly="${nantcontrib.dir}/NAnt.Contrib.Tasks.dll" />
  
  
  <target name="help">
    <echo>Available targets:
    
clean:
  Cleans output and solution folders
init:
  Creates output folders and AssemblyInfo files
build:
  Compiles solution    
unit-test:
  Runs unit tests
    </echo>
    
    <fail message="No target specified." />
  </target>
  
  <target name="clean">
    <delete dir="${build.dir}" verbose="${verbose}" />
    <delete>
      <fileset>
        <include name="${src.dir}\**\AssemblyInfo.cs" />
        <include name="${src.dir}\**\bin\**" />
        <include name="${src.dir}\**\obj\**" />
        <include name="${tests.dir}\**\AssemblyInfo.cs" />
        <include name="${tests.dir}\**\bin\**" />
        <include name="${tests.dir}\**\obj\**" />
      </fileset>
    </delete>
  </target>
  
  <target name="init" depends="clean">
    <mkdir dir="${build.dir}" verbose="${verbose}" />
    <mkdir dir="${reports.dir}" verbose="${verbose}" />
    <mkdir dir="${reports.dir}/Coverage" verbose="${verbose}" />
    <mkdir dir="${reports.dir}/NUnit" verbose="${verbose}" />
    
    <property name="assembly.title" value="Core-Environment" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="21035e24-d5c4-4c8a-82ba-7903da246e69" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Environment\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>    
    
    <property name="assembly.title" value="Core-Domain" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="52a78ccd-cf4c-4567-8040-6f712a7eeb74" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Domain\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Business" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="8f4ec48d-ceec-4008-9391-26956335493d" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Business\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Web" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="fc2dfb3c-500b-4709-ad3b-bb36eedef0f5" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Web\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Environment-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="9f068397-99d3-4442-ba1d-b5b854a5e688" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Environment.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Domain-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="615cd7e5-2292-42fa-8764-0a05cb46c214" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Domain.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>    
    
    <property name="assembly.title" value="Core-Domain-IntegrationTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="615cd7e5-2292-42fa-8764-0a05cb46c214" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Domain.IntegrationTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="Core-Business-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="19d6b1f4-9bd6-4ee8-91c2-be2977a13fb8" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Business.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="Core-Business-IntegrationTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="58C99E38-EB57-4190-9CF1-01CE75A1B738" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Business.IntegrationTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="Core-Web-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="453b1282-6fe5-43f3-8563-066c9f2a94fa" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.Web.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="SmokeTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="8d5c9f9d-1fd6-44ae-8286-b8c0900fd1ae" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${tests.dir}\phiNdus.fundus.SmokeTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    
    <property name="assembly.title" value="CliTools" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="be75437a-285e-4eba-b88a-5b2627a94e54" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.template"
          tofile="${src.dir}\phiNdus.fundus.Core.CliTools\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>  
  </target>
  
  <!--
    TARGET: build
  -->
  <target name="build" depends="init">
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Environment.dll" debug="true" verbose="${verbose}" platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Environment/**/*.cs" />
      </sources>
      <references>
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Domain.dll" debug="true" verbose="${verbose}" platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Domain/**/*.cs" />
      </sources>
      <references>
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.Clr.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.NHibernate.dll" />      
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />
        <include name="${nhibernate.dir}/**/Iesi.Collections.dll" />
        <include name="${nhibernate.dir}/**/NHibernate.dll" />
        <include name="${nhibernate.dir}/**/NHibernate.ByteCode.Castle.dll" />             
      </references>
      <resources>
        <include name="${src.dir}/phiNdus.fundus.Core.Domain/**/*.hbm.xml" />
      </resources>      
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Business.dll" debug="true" verbose="${verbose}" platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Business/**/*.cs" />
      </sources>
      <references>
        <include name="${bin.dir}/phiNdus.fundus.Core.Domain.dll" />
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.Clr.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.NHibernate.dll" />         
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Web.dll" debug="true" verbose="${verbose}" platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Web/**/*.cs" />
      </sources>
      <references>
        <include name="${bin.dir}/phiNdus.fundus.Core.Business.dll" />
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/loggingFacility/Castle.Facilities.Logging.dll" />
        <include name="${castle-windsor.dir}/loggingFacility/Castle.Facilities.Log4netIntegration.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />
        <include name="${castle-windsor.dir}/loggingFacility/log4net.dll" />
        <include name="${mvc-3.dir}\System.Web.Mvc.dll" />
        <include name="Microsoft.CSharp" />
        <include name="System.Web.ApplicationServices.dll" />  
        <include name="System.ComponentModel.DataAnnotations.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Environment.UnitTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Environment.UnitTests/**/*.cs" />
      </sources>
      <references>
        <include name="${nunit.dir}/nunit.framework.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Environment.dll" />
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Domain.UnitTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Domain.UnitTests/**/*.cs" />
      </sources>
      <references>
        <include name="${nunit.dir}/nunit.framework.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Domain.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.NHibernate.dll" />      
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />      
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Domain.IntegrationTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Domain.IntegrationTests/**/*.cs" />
      </sources>
      <references>
        <include name="${nunit.dir}/nunit.framework.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Domain.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.Clr.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.NHibernate.dll" />      
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />
        <include name="${nhibernate.dir}/**/NHibernate.dll" />
        <include name="${nhibernate.dir}/**/Iesi.Collections.dll" />
        <include name="${nhibernate.dir}/**/NHibernate.ByteCode.Castle.dll" />        
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Business.UnitTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Business.UnitTests/**/*.cs" />
      </sources>
      <references>
        <include name="${nunit.dir}/nunit.framework.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Business.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Domain.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.Clr.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.NHibernate.dll" />      
        <include name="${rhino-mocks.dir}/Rhino.Mocks.dll" />
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />        
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Business.IntegrationTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Business.IntegrationTests/**/*.cs" />
      </sources>
      <references>
        <include name="${nunit.dir}/nunit.framework.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Business.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Domain.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.Clr.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.NHibernate.dll" />      
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" /> 
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.Core.Web.UnitTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${src.dir}/phiNdus.fundus.Core.Web.UnitTests/**/*.cs" />
      </sources>
      <references>
        <include name="${bin.dir}/phiNdus.fundus.Core.Business.dll" />
        <include name="${bin.dir}/phiNdus.fundus.Core.Web.dll" />
        <include name="${castle-windsor.dir}/Castle.Core.dll" />
        <include name="${castle-windsor.dir}/loggingFacility/Castle.Facilities.Logging.dll" />
        <include name="${castle-windsor.dir}/loggingFacility/Castle.Facilities.Log4netIntegration.dll" />
        <include name="${castle-windsor.dir}/Castle.Windsor.dll" />
        <include name="${castle-windsor.dir}/loggingFacility/log4net.dll" />
        <include name="${nunit.dir}/nunit.framework.dll" />        
        <include name="${rhino-mocks.dir}/Rhino.Mocks.dll" />
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.dll" />      
        <include name="${lib.dir}/Rhino.Commons/Rhino.Commons.Clr.dll" />   
        <include name="${mvc-3.dir}\System.Web.Mvc.dll" />
        <include name="System.Web.ApplicationServices.dll" />        
      </references>
    </csc>
    
    <csc target="library" output="${bin.dir}/phiNdus.fundus.SmokeTests.dll" debug="true" verbose="${verbose}"  platform="${platform}">
      <sources>
        <include name="${tests.dir}/phiNdus.fundus.SmokeTests/**/*.cs" />
      </sources>
      <references>
        <include name="${nunit.dir}/nunit.framework.dll" />        
      </references>
    </csc>
    
    <!-- Copy test dependencies -->
    <copy todir="${bin.dir}" flatten="true">
      <fileset basedir="${mvc-3.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${bin.dir}" flatten="true">
      <fileset basedir="${castle-windsor.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${bin.dir}" flatten="true">
      <fileset basedir="${nhibernate.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${bin.dir}" flatten="true">
      <fileset basedir="${lib.dir}/Rhino.Commons">
        <include name="**/Rhino.Commons.dll" />
        <include name="**/Rhino.Commons.Clr.dll" />
        <include name="**/Rhino.Commons.NHibernate.dll" />
      </fileset>
    </copy>
    <copy todir="${bin.dir}" flatten="true">
      <fileset basedir="${rhino-mocks.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    
    <!-- Copy web-project dependencies -->
    <copy todir="${web.dir}">
      <fileset basedir="${src.dir}/phiNdus.fundus.Core.Web">
        <include name="**/*" />
        <exclude name="bin/**" />
        <exclude name="obj/**" />
        <exclude name="*.csproj*" />
        <exclude name="**/AssemblyInfo.cs" />
        <exclude name="**/Web*.config" />
      </fileset>
    </copy>
    <copy todir="${web.dir}/Bin">
      <fileset basedir="${bin.dir}">
        <include name="*.dll" />
      </fileset>
    </copy>
    <copy todir="${web.dir}/Bin" flatten="true">
      <fileset basedir="${asp-net-web-pages.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${web.dir}/Bin" flatten="true">
      <fileset basedir="${mvc-3.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${web.dir}/Bin" flatten="true">
      <fileset basedir="${castle-windsor.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${web.dir}/Bin" flatten="true">
      <fileset basedir="${nhibernate.dir}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${web.dir}/Bin" flatten="true">
      <fileset basedir="${lib.dir}/Rhino.Commons">
        <include name="**/Rhino.Commons.dll" />
        <include name="**/Rhino.Commons.Clr.dll" />
        <include name="**/Rhino.Commons.NHibernate.dll" />
      </fileset>
    </copy>
  </target>
  
  <target name="init-unit-test">
    <copy file="${nunit.dir}/nunit.framework.dll" todir="${bin.dir}" />
  </target>
  
  <!--
    TARGET: UNIT-TEST
  -->
  <target name="unit-test" depends="build init-unit-test"> <!-- init-part-cover  -->
    <property name="app.config.connstrings.default.connstring" value="" />
    <property name="app.config.connstrings.default.providername" value="" />
    
    
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <test>
        <assemblies>
          <include name="${bin.dir}/*.UnitTests.dll" />
        </assemblies>
      </test>
    </nunit2>
    
    <![CDATA[
    <property name="tmp.partcover.xml.reports" value="" />
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${test.dir}/*.UnitTests.dll" />
        </items>
      </in>
      <do>
        <![CDATA
        <exec program="${partcover.dir}/PartCover.exe"
          failonerror="${failonerror}"
          commandline="--register --target &quot;${nunit.dir}/nunit-console-x86.exe&quot; --target-args &quot;\&quot;${filename}\&quot; /xml=\&quot;${reports.dir}/${path::get-file-name(filename)}-TestResult.xml\&quot; /framework=v4.0 /noshadow&quot; --include [phiNdus*]* --exclude [*Tests]* --output &quot;${reports.dir}/${path::get-file-name(filename)}-Coverage.xml&quot; --log 0" />
          
        <echo message="##teamcity[importData type='nunit' path='${reports.dir}/${path::get-file-name(filename)}-TestResult.xml']" />
        <echo message="##teamcity[importData type='dotNetCoverage' tool='partcover' path='${reports.dir}/${path::get-file-name(filename)}-Coverage.xml' partcover_report_xslts='tools/PartCover/xslt/Coverage.xslt=>${path::get-file-name(filename)}-Coverage.html']" />
          
        <if test="${tmp.partcover.xml.reports != ''}">
          <property name="tmp.partcover.xml.reports" value="${tmp.partcover.xml.reports};" />
        </if>
        <property name="tmp.partcover.xml.reports" value="${tmp.partcover.xml.reports}${reports.dir}/${path::get-file-name(filename)}-Coverage.xml" />
        ]>
        <exec program="${nunit.dir}/nunit-console-x86.exe"
          failonerror="${failonerror}"
          commandline="&quot;${filename}&quot; /xml=&quot;${reports.dir}/${path::get-file-name(filename)}-TestResult.xml&quot; /framework=v4.0 /noshadow" />
            
        <echo message="##teamcity[importData type='nunit' path='${reports.dir}/${path::get-file-name(filename)}-TestResult.xml']" />  
        <nunit2report todir="${reports.dir}/NUnit">
          <fileset>
            <include name="${reports.dir}/${path::get-file-name(filename)}-TestResult.xml" />
          </fileset>
        </nunit2report>
        <move file="${reports.dir}/NUnit/index.html" tofile="${reports.dir}/NUnit/${path::get-file-name(filename)}-TestResult.html" />
      </do>
    </foreach>
    <!--
    <delete file="${base.dir}/partcover.driver.log" />
    
    <exec program="${reportgenerator.dir}/ReportGenerator.exe"
      commandline="&quot;${tmp.partcover.xml.reports}&quot; &quot;${reports.dir}/Coverage&quot;" />
    <move file="${reports.dir}/Coverage/index.htm" tofile="${reports.dir}/Coverage/index.html" />
     -->
     ]]>
  </target>
  
  <target name="init-integration-test">
    <property name="sql.database-name" value="${integration.database-name}" />
    <property name="sql.connstring" value="Provider=SQLOLEDB; Data Source=${integration.data-source}; Integrated Security=SSPI" />
    
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/create.sql"
    />
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/ddl.sql"
    />
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml.sql"
    />
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml-integration.sql"
    />
  </target>
  
  <!--
    TARGET: INTEGRATION-TEST
  -->
  <target name="integration-test" depends="unit-test init-integration-test">
    <property name="app.config.connstrings.default.connstring" value="${integration.connstring}" />
    <property name="app.config.connstrings.default.providername" value="${integration.providername}" />
   
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}/*.IntegrationTests.dll" />
        </items>
      </in>
      <do>
        <property name="app.config.dest" value="${bin.dir + '/' + path::get-file-name(filename) + '.config'}" />
        <call target="generate-app-config" />
        
        <exec program="${nunit.dir}/nunit-console-x86.exe"
          failonerror="${failonerror}"
          commandline="&quot;${filename}&quot; /xml=&quot;${reports.dir}/${path::get-file-name(filename)}-TestResult.xml&quot; /framework=v4.0 /noshadow" />
            
        <echo message="##teamcity[importData type='nunit' path='${reports.dir}/${path::get-file-name(filename)}-TestResult.xml']" />  
        <nunit2report todir="${reports.dir}/NUnit">
          <fileset>
            <include name="${reports.dir}/${path::get-file-name(filename)}-TestResult.xml" />
          </fileset>
        </nunit2report>
        <move file="${reports.dir}/NUnit/index.html" tofile="${reports.dir}/NUnit/${path::get-file-name(filename)}-TestResult.html" />
      </do>
    </foreach>  
  </target>
  
  <!--
    TARGET: DEPLOY-STAGING
  -->
  <target name="deploy-staging" depends="build">
    <property name="sql.database-name" value="${staging.database-name}" />
    <property name="sql.connstring" value="Provider=SQLOLEDB; Data Source=${integration.data-source}; Integrated Security=SSPI" />
    
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/create.sql" />
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/ddl.sql" />
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml.sql" />
    <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/dml-staging.sql" />
    
    <property name="web.config.connstrings.default.connstring" value="${staging.connstring}" />
    <property name="web.config.connstrings.default.providername" value="${staging.providername}" />
    <property name="web.config.dest" value="${web.dir}/Web.config" />
    <call target="generate-web-config" />

    <property name="views.web.config.dest" value="${web.dir}/Views/Web.config" />
    <call target="generate-views-web-config" />
    
    <delete dir="${staging.dir}" />
    <mkdir dir="${staging.dir}" />
    
    <!-- http://msdn.microsoft.com/en-us/library/ms229863%28VS.80%29.aspx -->
    <exec program="${framework::get-tool-path('aspnet_compiler.exe')}" verbose="true"
      commandline="-v &quot;${staging.vdir}&quot; -p &quot;${web.dir}&quot; &quot;${staging.dir}&quot; -nologo" />
  </target>
  
  <!--
    TARGET: FXCOP
  -->
  <target name="fxcop" depends="build">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}/phiNdus.*.dll" />
          <exclude name="${bin.dir}/*Tests.dll" />
        </items>
      </in>
      <do>
        <exec program="${fxcop.dir}/FxCopCmd.exe"
          commandline="/f:&quot;${filename}&quot; /out:&quot;${reports.dir}/${path::get-file-name(filename)}-FxCop.xml&quot;"
        />
        <echo message="##teamcity[importData type='FxCop' path='${reports.dir}/${path::get-file-name(filename)}-FxCop.xml']" />
      </do>
    </foreach>
  </target>
  
  <target name="generate-app-config">
    <copy file="${config.dir}/App.config.template"
      tofile="${app.config.dest}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target> 
  
  <target name="generate-web-config">
    <copy file="${config.dir}/Web.config.template"
      tofile="${web.config.dest}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>
  
  <target name="generate-views-web-config">
    <copy file="${config.dir}/Views.Web.config.template"
      tofile="${views.web.config.dest}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>
  
  <target name="init-part-cover">
    <exec program="${corflags.dir}/CorFlags.exe"
      commandline="&quot;${partcover.dir}/PartCover.exe&quot; /32BIT+ /Force /nologo" />
    <!--
    <exec program="${corflags.dir}/CorFlags.exe"
      commandline="&quot;${partcover.dir}/PartCover.Browser.exe&quot; /32BIT+ /Force /nologo" />      
    -->
    <regasm>
      <assemblies>
        <include name="${partcover.dir}/PartCover.exe" />
        <include name="${partcover.dir}/PartCover.Browser.exe" />
  
        <include name="${partcover.dir}/Interop.PartCover.dll" />
        <include name="${partcover.dir}/PartCover.dll" />
        <include name="${partcover.dir}/PartCover.CorDriver.dll" />
        <include name="${partcover.dir}/PartCover.Framework.dll" />
      </assemblies>
    </regasm>
  </target>
</project>
