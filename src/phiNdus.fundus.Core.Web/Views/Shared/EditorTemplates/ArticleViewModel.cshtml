@model ArticleViewModel

@Html.HiddenFor(m => m.Id)
@Html.HiddenFor(m => m.Version)
<div class="article-editor">
<h3>Eigenschaften</h3>
<div class="article-properties-editor">
@using (Html.BeginContainerFor(m => m.PropertyValues))
{
    @Html.EditorFor(x => x.PropertyValues);
}
<h4>Neue Eigenschaft hinzufügen</h4>
@Html.DropDownListFor(m => m.RemainingPropertyId, Model.RemainingProperties)
<a href="#" onclick="addProperty(
    '@Html.IdFor(m => m.RemainingPropertyId)',
    '@Html.IdFor(m => m.RemainingDiscriminatorId)',
    '@Html.IdFor(m => m.PropertyValues)',
    '@Html.NameFor(m => m.PropertyValues)'); return false;">Eigenschaft hinzufügen</a>
</div>



@if (!Model.IsChild)
{
<h3>Diskriminatoren</h3>
<div class="article-discriminators-editor">
@using (Html.BeginContainerFor(m => m.Discriminators))
{
    @Html.EditorFor(x => x.Discriminators);
}
<h4>Neuer Diskriminator hinzufügen</h4>
@Html.DropDownListFor(m => m.RemainingDiscriminatorId, Model.RemainingProperties)
<a href="#" onclick="addDiscriminator(
    '@Html.IdFor(m => m.RemainingPropertyId)',
    '@Html.IdFor(m => m.RemainingDiscriminatorId)',
    '@Html.IdFor(m => m.Discriminators)',
    '@Html.NameFor(m => m.Discriminators)'); return false;">Diskriminator hinzufügen</a>
</div>
}

@if (Model.IsChild)
{
    @Html.HiddenFor(m => m.IsDeleted)
    <a href="#" onclick="removeChildArticle('@Html.IdFor(m => m.IsDeleted)'); return false;">&quot;Kind&quot; entfernen</a>
}

@if (!Model.IsChild)
{
<h3>&quot;Kinder&quot;</h3>
<div class="article-children-editor">
@using (Html.BeginContainerFor(m => m.Children))
{
@Html.EditorFor(m => m.Children)
}
</div>
<a href="#" onclick="addChild('@Html.NameFor(m => m.Children)'); return false;">Neues &quot;Kind&quot; hinzufügen</a>
}


</div>
