<?xml version="1.0"?>
<!--
 * Copyright 2011 Reto Inderbitzin, phiNdus.ch
 *
-->
<project name="fundus" default="help">
  <property name="verbose" value="false" />
  <property name="build.number" value="0.0.0.0" unless="${property::exists('build.number')}" />
  <property name="failonerror" value="true" unless="${property::exists('failonerror')}" />
  
  <property name="platform" value="anycpu" />
  <property name="machine" value="${dns::get-host-name()}" />
  
  <!--
    Base directories
  -->
  <property name="base.dir" value="." />
  <property name="config.dir" value="${base.dir}\config" />
  <property name="lib.dir" value="${base.dir}\lib" />
  <property name="src.dir" value="${base.dir}\src" />
  <property name="db.dir" value="${base.dir}\db" />
  <property name="sql.dir" value="${base.dir}\sql" />
  <property name="build.dir" value="${base.dir}\build" />
  <property name="packages.dir" value="${base.dir}\packages" />
  <property name="tests.dir" value="${base.dir}\tests" />
  <property name="tools.dir" value="${base.dir}\tools" />
  <property name="artifacts.dir" value="${base.dir}\artifacts" />
  
  <!--
    Target directories
  -->
  <property name="bin.dir" value="${build.dir}\bin" />
  <property name="website.dir" value="${build.dir}\website" />
  <property name="dist.dir" value="${build.dir}\dist" />
  <property name="reports.dir" value="${build.dir}\reports" />
    
  <!--
    Tools directories
  -->
  <property name="nunit.dir" value="${packages.dir}\NUnit.2.5.10.11092\tools" />
  <property name="partcover.dir" value="${tools.dir}\PartCover" />
  <property name="reportgenerator.dir" value="${tools.dir}\ReportGenerator" />
  <property name="msbuild.dir" value="${path::get-full-path(tools.dir + '\MSBuild')}" />
  <property name="nantcontrib.dir" value="${tools.dir}\nantcontrib" />
  <property name="corflags.dir" value="${tools.dir}" />
  <property name="fxcop.dir" value="${tools.dir}\FxCop" />
  <property name="rhino-mocks.dir" value="${tools.dir}\Rhino.Mocks" />
  <property name="fluentmigrator-tools.dir" value="${packages.dir}\FluentMigrator.Tools.1.0.1.0\tools\AnyCPU\40" />
  
  <!--
    Libraries directories
  -->
  <property name="castle-windsor.dir" value="${lib.dir}\Castle.Windsor" />
  <property name="mvc-3.dir" value="${lib.dir}\ASP.NET MVC 3"/>
  <property name="asp-net-web-pages.dir" value="${lib.dir}\ASP.NET Web Pages" />
  <property name="nhibernate.dir" value="${lib.dir}\NHibernate" />
  
  
  <!--
    Include property files:
      1. Default build properties
      2. Based on machine name. This is important for TeamCity Build Agents.
      3. Local properties: Don't but this file under version control
         Use Default.build.properties as template for your dev env
  -->
  <include buildfile="Default.build.properties" verbose="true" />
  <include buildfile="${machine + '.build.properties'}" if="${file::exists(machine + '.build.properties')}" verbose="true" />
  <include buildfile="Local.build.properties" if="${file::exists('Local.build.properties')}" verbose="true" />  
  
  <!--
    Prepare nant/nant contrib
  -->
  <loadtasks assembly="${nantcontrib.dir}\NAnt.Contrib.Tasks.dll" />
  <!-- NAnt-Task migrate kann nicht verwendet werden, da dann die Assembly (DbMigrations.dll) im Zugriff bleibt!!!
  <loadtasks assembly="${fluentmigrator-tools.dir}\FluentMigrator.NAnt.dll" />-->
  
  <target name="help">
    <echo message="
*************** HELP (DEFAULT) ***************
" />

    <loadfile file="${base.dir}\Help.txt" property="help.txt" />
    <echo message="${help.txt}" />
    <fail message="No target specified." />
  </target>

  
  <target name="clean">
    <echo message="
*************** CLEAN ***************
" />

    <delete dir="${build.dir}" verbose="${verbose}" />
    <delete>
      <fileset>
        <include name="${src.dir}\**\AssemblyInfo.cs" />
        <include name="${src.dir}\**\Web*.config" />
        <include name="${src.dir}\**\App*.config" />
        <include name="${src.dir}\**\bin\**" />
        <include name="${src.dir}\**\obj\**" />
        
        <include name="${db.dir}\**\AssemblyInfo.cs" />
        <include name="${db.dir}\**\Web*.config" />
        <include name="${db.dir}\**\App*.config" />
        <include name="${db.dir}\**\bin\**" />
        <include name="${db.dir}\**\obj\**" />
        
        <include name="${tests.dir}\**\AssemblyInfo.cs" />
        <include name="${tests.dir}\**\Web*.config" />
        <include name="${tests.dir}\**\App*.config" />
        <include name="${tests.dir}\**\bin\**" />
        <include name="${tests.dir}\**\obj\**" />
      </fileset>
    </delete>
  </target>

  
  <target name="init" depends="clean">
    <echo message="
*************** INIT ***************
" />

    <mkdir dir="${build.dir}" verbose="${verbose}" />
    <mkdir dir="${reports.dir}" verbose="${verbose}" />
    
    <property name="assembly.title" value="Database-Migrations" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="7a9024dc-acab-4d7f-9a1e-ea24f973ccf9" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${db.dir}\phiNdus.fundus.DbMigrations\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Domain" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="52a78ccd-cf4c-4567-8040-6f712a7eeb74" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Domain\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Business" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="8f4ec48d-ceec-4008-9391-26956335493d" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Business\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Web" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="fc2dfb3c-500b-4709-ad3b-bb36eedef0f5" />
    <property name="assembly.cls-compliant" value="true" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Web\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\Web.config.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Web\Web.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\Web.Debug.config.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Web\Web.Debug.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\Web.Release.config.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Web\Web.Release.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\Views.Web.config.tmpl"
          tofile="${src.dir}\phiNdus.fundus.Web\Views\Web.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Domain-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="615cd7e5-2292-42fa-8764-0a05cb46c214" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Domain.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\App.config.UnitTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Domain.UnitTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy> 
    
    <property name="assembly.title" value="Core-Domain-IntegrationTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="615cd7e5-2292-42fa-8764-0a05cb46c214" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Domain.IntegrationTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\App.config.IntegrationTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Domain.IntegrationTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Business-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="19d6b1f4-9bd6-4ee8-91c2-be2977a13fb8" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Business.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\App.config.UnitTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Business.UnitTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>     
    
    <property name="assembly.title" value="Core-Business-IntegrationTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="58C99E38-EB57-4190-9CF1-01CE75A1B738" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Business.IntegrationTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    <copy file="${config.dir}\App.config.IntegrationTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Business.IntegrationTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="Core-Web-UnitTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="453b1282-6fe5-43f3-8563-066c9f2a94fa" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Web.UnitTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <copy file="${config.dir}\App.config.UnitTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.Web.UnitTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy> 
    
    <property name="assembly.title" value="TestHelpers" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="e3cf7d17-6faf-4bfa-8d1f-c5b3f431b89d" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.TestHelpers\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    
    <property name="assembly.title" value="SmokeTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="8d5c9f9d-1fd6-44ae-8286-b8c0900fd1ae" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.SmokeTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>   
    <copy file="${config.dir}\App.config.SmokeTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.SmokeTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>  
    
    <property name="assembly.title" value="AcceptanceTests" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="1fcb1ebf-1bda-4977-a7fb-ac748a7f0d47" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.AcceptanceTests\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <property name="deploy.connstring" value="${acceptance.connstring}" />
    <property name="deploy.iisserver" value="${acceptance.iisserver}" />
    <property name="deploy.vdir" value="${acceptance.vdir}" />
    <copy file="${config.dir}\App.config.AcceptanceTests.tmpl"
          tofile="${tests.dir}\phiNdus.fundus.AcceptanceTests\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>    
    
    <property name="assembly.title" value="CliTools" />
    <property name="assembly.description" value="" />
    <property name="assembly.guid" value="be75437a-285e-4eba-b88a-5b2627a94e54" />
    <property name="assembly.cls-compliant" value="false" />
    <copy file="${config.dir}\AssemblyInfo.cs.tmpl"
          tofile="${src.dir}\phiNdus.fundus.CliTools\Properties\AssemblyInfo.cs"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>  
    <copy file="${config.dir}\App.config.CliTools.tmpl"
          tofile="${src.dir}\phiNdus.fundus.CliTools\App.config"
          outputencoding="UTF-8" overwrite="true"
          verbose="${verbose}">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy> 
  </target>

  
  <target name="build" depends="init">
    <echo message="
*************** BUILD ***************
" />
  
    <msbuild project="${base.dir}\phiNdus.fundus.sln" verbosity="Minimal">
      <property name="Configuration" value="Debug" />
      <property name="OutputPath" value="${path::get-full-path(bin.dir)}" />
      <property name="MSBuildExtensionsPath32" value="${msbuild.dir}" />
    </msbuild>
    
    <delete>
      <fileset>
         <include name="${bin.dir}\**\*.config" />
         <exclude name="${bin.dir}\**\phiNdus.fundus.CliTools.exe.config" />
      </fileset>
    </delete>
    
    <move todir="${website.dir}">
      <fileset basedir="${bin.dir}\_PublishedWebsites\phiNdus.fundus.Web">
        <include name="**\*" />
      </fileset>
    </move> 
    
    <zip zipfile="${artifacts.dir}\AcceptanceTests.zip">
      <fileset basedir="${bin.dir}">
        <include name="**\*" />
        <exclude name="_PublishedWebsites\" />
        <exclude name="**\*UnitTests*" />
        <exclude name="**\*IntegrationTests*" />
        <exclude name="**\*ComponentTests*" />
        <exclude name="**\*.sql" />
        <exclude name="**\*SmokeTests*" />
      </fileset>
    </zip>
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\AcceptanceTests.zip']" />
    
    <zip zipfile="${artifacts.dir}\SmokeTests.zip">
      <fileset basedir="${bin.dir}">
        <include name="**\*" />
        <exclude name="_PublishedWebsites\" />
        <exclude name="**\*UnitTests*" />
        <exclude name="**\*IntegrationTests*" />
        <exclude name="**\*ComponentTests*" />
        <exclude name="**\*.sql" />
        <exclude name="**\*AcceptanceTests*" />
      </fileset>
    </zip>
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\SmokeTests.zip']" />
    
    <zip zipfile="${artifacts.dir}\Website.zip">
      <fileset basedir="${website.dir}">
        <include name="**\*" />
        <exclude name="*.config" />
      </fileset>
    </zip>
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\Website.zip']" />
  </target>

  <target name="init-unit-test" depends="build">
    <echo message="
*************** INIT-UNIT-TEST ***************
" />

    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.UnitTests.dll" />
        </items>
      </in>
      <do>
        <copy file="${config.dir}/App.config.UnitTests.tmpl"
              tofile="${bin.dir + '/' + path::get-file-name(filename) + '.config'}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
      </do>
    </foreach>
  </target>
  
  <target name="unit-test" depends="init-unit-test">
    <echo message="
*************** UNIT-TEST ***************
" />

    <!-- TeamCity -->
    <if test="${property::exists('agent.name')}">
      <property name="teamcity.dotnet.nant.nunit2.platform" value="x86" />
      <nunit2 verbose="${verbose}">
        <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
        <formatter type="Plain" usefile="false" />
        <test>
          <assemblies>
            <include name="${bin.dir}\*.UnitTests.dll" />
          </assemblies>
        </test>
      </nunit2>
      
      
      <foreach item="File" property="filename">
        <in>
          <items>
            <include name="${reports.dir}\*UnitTests*.xml" />
          </items>
        </in>
        <do>
          <nunit2report format="NoFrames" todir="${reports.dir}">
            <fileset>
              <include name="${filename}" />
            </fileset>
          </nunit2report>
          <move file="${reports.dir}\index.html" tofile="${reports.dir}\${path::get-file-name-without-extension(filename)}.html" />
        </do>
      </foreach>
    </if>
    
    <!-- Local -->
    <if test="${not property::exists('agent.name')}">
      <property name="tmp.partcover.xml.reports" value="" />
      <foreach item="File" property="filename">
        <in>
          <items>
            <include name="${bin.dir}\*.UnitTests.dll" />
          </items>
        </in>
        <do>
          <exec program="${partcover.dir}/PartCover.exe"
                commandline="--register --target &quot;${nunit.dir}/nunit-console-x86.exe&quot; --target-args &quot;\&quot;${filename}\&quot; /xml=\&quot;${reports.dir}/${path::get-file-name(filename)}-TestResult.xml\&quot; /framework=v4.0 /noshadow&quot; --include [phiNdus*]* --exclude [*Tests]* --output &quot;${reports.dir}/${path::get-file-name(filename)}-Coverage.xml&quot; --log 0" />
          
          <if test="${tmp.partcover.xml.reports != ''}">
            <property name="tmp.partcover.xml.reports" value="${tmp.partcover.xml.reports};" />
          </if>
          <property name="tmp.partcover.xml.reports"
                    value="${tmp.partcover.xml.reports}${reports.dir}/${path::get-file-name(filename)}-Coverage.xml" />
 
          <nunit2report todir="${reports.dir}/NUnit">
            <fileset>
              <include name="${reports.dir}/${path::get-file-name(filename)}-TestResult.xml" />
            </fileset>
          </nunit2report>
          <move file="${reports.dir}/NUnit/index.html" tofile="${reports.dir}/NUnit/${path::get-file-name(filename)}-TestResult.html" />
        </do>
      </foreach>
      <delete file="${base.dir}/partcover.driver.log" />
    
      <exec program="${reportgenerator.dir}/ReportGenerator.exe" verbose="true"
            commandline="&quot;${tmp.partcover.xml.reports}&quot; &quot;${reports.dir}/Coverage&quot;" />
      <move file="${reports.dir}/Coverage/index.htm" tofile="${reports.dir}/Coverage/index.html" />
    </if>
  </target>
  
  <target name="init-integration-test" depends="build">
    <echo message="
*************** INIT-INTEGRATION-TEST ***************
" />

    <property name="sql.database-name" value="${integration.database-name}" />
    <property name="sql.connstring" value="Provider=SQLOLEDB; Data Source=${integration.data-source}; Integrated Security=SSPI" />
    
    <sql connstring="${sql.connstring}"
      transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
      source="${base.dir}/sql/create.sql"
    />

    <!-- NAnt-Task migrate kann nicht verwendet werden, da dann die Assembly (DbMigrations.dll) im Zugriff bleibt!!!
    <migrate
      database="sql"
      connection="Data Source=${integration.data-source};Initial Catalog=${integration.database-name}; Integrated Security=SSPI"
      target="${build.dir}\bin\phiNdus.fundus.DbMigrations.dll"
    /> -->
    <exec program="${fluentmigrator-tools.dir}\Migrate.exe" verbose="true"
          commandline="/conn &quot;Data Source=${integration.data-source};Initial Catalog=${integration.database-name}; Integrated Security=SSPI&quot; /provider sql /assembly &quot;${build.dir}\bin\phiNdus.fundus.DbMigrations.dll&quot;" />

    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.IntegrationTests.dll" />
          <include name="${bin.dir}\*.ComponentTests.dll" />
        </items>
      </in>
      <do>
        <copy file="${config.dir}/App.config.IntegrationTests.tmpl"
              tofile="${bin.dir + '/' + path::get-file-name(filename) + '.config'}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
      </do>
    </foreach>
  </target>

  
  <target name="integration-test" depends="init-integration-test">
    <echo message="
*************** INTEGRATION-TEST ***************
" />

    <property name="teamcity.dotnet.nant.nunit2.platform" value="x86" />
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <formatter type="Plain" usefile="false" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.IntegrationTests.dll" />
          <include name="${bin.dir}\*.ComponentTests.dll" />
        </assemblies>
      </test>
    </nunit2>

    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${reports.dir}\*IntegrationTests*.xml" />
          <include name="${reports.dir}\*ComponentTests*.xml" />
        </items>
      </in>
      <do>
        <nunit2report format="NoFrames" todir="${reports.dir}">
          <fileset>
            <include name="${filename}" />
          </fileset>
        </nunit2report>
        <move file="${reports.dir}\index.html" tofile="${reports.dir}\${path::get-file-name-without-extension(filename)}.html" />
      </do>
    </foreach>
  </target>
  
  
  <target name="fxcop" depends="build">
    <echo message="
*************** FXCOP ***************
" />
  
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}/phiNdus.*.dll" />
          <exclude name="${bin.dir}/*Tests.dll" />
        </items>
      </in>
      <do>
        <exec program="${fxcop.dir}/FxCopCmd.exe"
          commandline="/f:&quot;${filename}&quot; /out:&quot;${reports.dir}/${path::get-file-name(filename)}-FxCop.xml&quot; /searchgac"
        />
        <echo message="##teamcity[importData type='FxCop' path='${reports.dir}/${path::get-file-name(filename)}-FxCop.xml']" />
      </do>
    </foreach>
  </target>

  
  <target name="commit-stage" depends="build unit-test integration-test">
    <echo message="
*************** COMMIT-STAGE ***************
" />  
    <!-- Artefakte werden unmittelbar nach dessen Erstellung gesendet. Siehe build-Target -->
  </target>


  <target name="init-deploy">
    <echo message="
*************** INIT-DEPLOY ***************
" />
  
    <fail if="${not file::exists(artifacts.dir + '\Website.zip')}" message="Artifact Website.zip not found." />
    <fail if="${not file::exists(artifacts.dir + '\SmokeTests.zip')}" message="Artifact SmokeTests.zip not found." />

    <unzip zipfile="${artifacts.dir}\SmokeTests.zip" todir="${bin.dir}" />
    <unzip zipfile="${artifacts.dir}\Website.zip" todir="${website.dir}" />
  </target>  
  
  <target name="deploy-database">
    <echo message="
*************** DEPLOY-DATABASE ***************
" />

    <if test="${sql.recreate}">
      <echo message="Recreating database..." />
      <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
           transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
           source="${base.dir}/sql/create.sql" />
    </if>
    
    <!-- NAnt-Task migrate kann nicht verwendet werden, da dann die Assembly (DbMigrations.dll) im Zugriff bleibt!!!
    <migrate
      database="sql"
      connection="${sql.connstring}"
      target="${website.dir}\bin\phiNdus.fundus.DbMigrations.dll"
    /> -->
    <exec program="${fluentmigrator-tools.dir}\Migrate.exe" verbose="true"
          commandline="/conn &quot;${sql.connstring}&quot; /provider sql /assembly &quot;${website.dir}\bin\phiNdus.fundus.DbMigrations.dll&quot;"
    />

    <if test="${sql.recreate}">
      <echo message="${my::merge-settings(config.dir + '\Settings.csv,' + deploy.settings)}"
            file="${build.dir}\Settings.Merged.csv" />
      <echo message="${my::generate-settings-dml(build.dir + '\Settings.Merged.csv')}"
            file="${build.dir}\Settings.Merged.sql" />
      
      <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
        transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
        source="${build.dir}\Settings.Merged.sql" />
        
      <if test="${file::exists(sql.custom-dml)}">
        <echo message="Executing ${sql.custom-dml}" />
        <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
          transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
          source="${sql.custom-dml}" />
      </if>      
        
      <sql connstring="Provider=SQLOLEDB;${sql.connstring}"
           transaction="true" delimiter=";" delimstyle="Normal" print="false" batch="true"
           source="${base.dir}/sql/grant.sql" />
    </if>
  </target>
  
  <target name="deploy-site">
    <echo message="
*************** DEPLOY-SITE ***************
" />

    <fail if="${file::exists(website.dir + '\Web.config')}" message="File ${website.dir}\Web.config already exists." />
    <copy file="${config.dir}\Web.config.tmpl"
          tofile="${website.dir}\Web.config">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <!--
    <copy file="${website.dir}\Web.config" tofile="${artifacts.dir}\Web.xml" />
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\Web.xml']" />
    -->
    
    <fail if="${file::exists(website.dir + '\Views\Web.config')}" message="File ${website.dir}\Views\Web.config already exists." />
    <copy file="${config.dir}\Views.Web.config.tmpl"
          tofile="${website.dir}\Views\Web.config">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <!--
    <copy file="${website.dir}\Views\Web.config" tofile="${artifacts.dir}\Views.Web.xml" />
    <echo message="##teamcity[publishArtifacts '${artifacts.dir}\Views.Web.xml']" />
    -->
         
    <delete if="${deploy.clean}">
      <fileset basedir="${deploy.dir}">
        <include name="**\*" />
      </fileset>
    </delete>
    <delete unless="${deploy.clean}">
      <fileset basedir="${deploy.dir}">
        <include name="bin\**\*" />
        <include name="Content\**\*" />
        <exclude name="Content\Images\Articles\**\*" />
        <include name="Scripts\**\*" />
        <include name="Views\**\*" />
      </fileset>
    </delete>
    
    <mkdir dir="${deploy.dir}" unless="${directory::exists(deploy.dir)}" />

    


    <!-- http://msdn.microsoft.com/en-us/library/ms229863%28VS.80%29.aspx -->
    <!--
    <exec program="${framework::get-tool-path('aspnet_compiler.exe')}" verbose="true"
      commandline="-v &quot;${deploy.vdir}&quot; -p &quot;${website.dir}&quot; &quot;${deploy.dir}&quot; -nologo" 
      />
    -->
    <copy todir="${deploy.dir}">
      <fileset basedir="${website.dir}">
        <include name="**/*" />
      </fileset>
    </copy>
    
    
    <mkdir dir="${deploy.dir}\Content\Images\Articles" unless="${directory::exists(deploy.dir + '\Content\Images\Articles')}" />
    <copy todir="${deploy.dir}\Content" if="${deploy.clean}">
      <fileset basedir="${base.dir}\content">
        <include name="**/*" />
      </fileset>
    </copy>
  
  </target>
  
  <target name="deploy" depends="init-deploy">
    <echo message="
*************** DEPLOY ***************
" />
  
    <exec program="appcmd.exe" verbose="true" failonerror="false"
          basedir="${environment::get-variable('WinDir')}\system32\inetsrv"
          commandline="stop apppool ${deploy.iisapppool}" />

    <call target="deploy-database" cascade="false" />
          
    <call target="deploy-site" cascade="false" />
    
    <exec program="appcmd.exe" verbose="true"
          basedir="${environment::get-variable('WinDir')}\system32\inetsrv"
          commandline="start apppool ${deploy.iisapppool}" />
    
    <exec program="icacls" verbose="true" if="${deploy.clean}">
      <arg line='${deploy.dir}\Content\Images\Articles /grant "IIS_IUSRS":(OI)(CI)(M)' />
    </exec>
    
    <echo message="
*************** INIT-SMOKE-TEST ***************
" />
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.SmokeTests.dll" />
        </items>
      </in>
      <do>
        <copy file="${config.dir}/App.config.SmokeTests.tmpl"
              tofile="${bin.dir + '/' + path::get-file-name(filename) + '.config'}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
      </do>
    </foreach>
    
    <echo message="
*************** SMOKE-TEST ***************
" />    
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <formatter type="Plain" usefile="false" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.SmokeTests.dll" />
        </assemblies>
      </test>
    </nunit2>  
    
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${reports.dir}\*SmokeTests*.xml" />
        </items>
      </in>
      <do>
        <nunit2report format="NoFrames" todir="${reports.dir}">
          <fileset>
            <include name="${filename}" />
          </fileset>
        </nunit2report>
        <move file="${reports.dir}\index.html" tofile="${reports.dir}\${path::get-file-name-without-extension(filename)}.html" />
      </do>
    </foreach>   
  </target>

  
  <target name="deploy-acceptance">
    <echo message="
*************** DEPLOY-ACCEPTANCE ***************
" />
  
    <property name="sql.recreate" value="true" />
    <property name="sql.database-name" value="${acceptance.database-name}" />
    <property name="sql.connstring" value="Data Source=${acceptance.data-source}; Initial Catalog=${sql.database-name}; Integrated Security=SSPI" />
    <property name="sql.custom-dml" value="${sql.dir}\dml-acceptance.sql" />
    
    <property name="deploy.clean" value="true" />
    <property name="deploy.settings" value="${config.dir}\Settings.Acceptance.csv" />
    <property name="deploy.connstring" value="${acceptance.connstring}" />
    <property name="deploy.providername" value="${acceptance.providername}" />
    <property name="deploy.dir" value="${acceptance.dir}" />
    <property name="deploy.iisserver" value="${acceptance.iisserver}" />
    <property name="deploy.iisapppool" value="${acceptance.iisapppool}" />
    <property name="deploy.vdir" value="${acceptance.vdir}" />
    
    <call target="deploy" cascade="false" />
  </target>
  
  
  <target name="deploy-staging">
    <echo message="
*************** DEPLOY-STAGING ***************
" />  

    <property name="sql.recreate" value="false" />
    <property name="sql.database-name" value="${staging.database-name}" />
    <property name="sql.connstring" value="Data Source=${staging.data-source}; Initial Catalog=${sql.database-name}; Integrated Security=SSPI" />
    <property name="sql.custom-dml" value="${sql.dir}\dml-staging.sql" />
    
    <property name="deploy.clean" value="false" />
    <property name="deploy.settings" value="${config.dir}\Settings.Staging.csv" />
    <property name="deploy.connstring" value="${staging.connstring}" />
    <property name="deploy.providername" value="${staging.providername}" />
    <property name="deploy.dir" value="${staging.dir}" />
    <property name="deploy.iisserver" value="${staging.iisserver}" />
    <property name="deploy.iisapppool" value="${staging.iisapppool}" />
    <property name="deploy.vdir" value="${staging.vdir}" />
    
    <call target="deploy" cascade="false" />
  </target>
  
  
  <target name="deploy-production">
    <echo message="
*************** DEPLOY-PRODUCTION ***************
" />  

    <property name="sql.recreate" value="false" />
    <property name="sql.database-name" value="${production.database-name}" />
    <property name="sql.connstring" value="Data Source=${production.data-source}; Initial Catalog=${sql.database-name}; Integrated Security=SSPI" />
    <property name="sql.custom-dml" value="${sql.dir}\dml-production.sql" />
    
    <property name="deploy.clean" value="false" />
    <property name="deploy.settings" value="" />
    <property name="deploy.connstring" value="${production.connstring}" />
    <property name="deploy.providername" value="${production.providername}" />
    <property name="deploy.dir" value="${production.dir}" />
    <property name="deploy.iisserver" value="${production.iisserver}" />
    <property name="deploy.iisapppool" value="${production.iisapppool}" />
    <property name="deploy.vdir" value="${production.vdir}" />
    
    <call target="deploy" cascade="false" />
  </target>
  
  
  <target name="init-acceptance-test">
    <echo message="
*************** INIT-ACCEPTANCE-TEST ***************
" />

    <fail if="${not file::exists(artifacts.dir + '\AcceptanceTests.zip')}" message="Artifact AcceptanceTests.zip not found." />
  
    <unzip zipfile="${artifacts.dir}\AcceptanceTests.zip" todir="${bin.dir}" />

    <call target="deploy-acceptance" cascade="false" />
    
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${bin.dir}\*.AcceptanceTests.dll" />
        </items>
      </in>
      <do>
        <property name="tofile" value="${bin.dir + '/' + path::get-file-name(filename) + '.config'}" />
        <copy file="${config.dir}/App.config.AcceptanceTests.tmpl"
              tofile="${tofile}">
          <filterchain>
            <expandproperties />
          </filterchain>
        </copy>
        <echo message="##teamcity[publishArtifacts '${tofile}']" />
      </do>
    </foreach>
  </target>

  
  <target name="acceptance-test" depends="init-acceptance-test">
    <echo message="
*************** ACCEPTANCE-TEST ***************
" />
  
    <nunit2 verbose="${verbose}">
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${reports.dir}" />
      <formatter type="Plain" usefile="false" />
      <test>
        <assemblies>
          <include name="${bin.dir}\*.AcceptanceTests.dll" />
        </assemblies>
      </test>
    </nunit2>  
    
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${reports.dir}\*AcceptanceTests*.xml" />
        </items>
      </in>
      <do>
        <nunit2report format="NoFrames" todir="${reports.dir}">
          <fileset>
            <include name="${filename}" />
          </fileset>
        </nunit2report>
        <move file="${reports.dir}\index.html" tofile="${reports.dir}\${path::get-file-name-without-extension(filename)}.html" />
      </do>
    </foreach>    
  </target>  

  
  <target name="acceptance-stage">
    <echo message="
*************** ACCEPTANCE-STAGE ***************
" />

    <delete dir="${build.dir}" verbose="${verbose}" />
    <call target="acceptance-test" cascade="true" />
  </target>
  
  
  <target name="let-me-contribute">
    <echo message="
*************** LET-ME-CONTRIBUTE ***************
" />

    <call target="commit-stage" cascade="false" />
    <call target="acceptance-stage" cascade="false" />
  </target>
  
  <![CDATA[
  <target name="init-part-cover">
    <echo message="
*************** INIT-PART-COVER ***************
" />
  
    <exec program="${corflags.dir}/CorFlags.exe"
      commandline="&quot;${partcover.dir}/PartCover.exe&quot; /32BIT+ /Force /nologo" />
    <!--
    <exec program="${corflags.dir}/CorFlags.exe"
      commandline="&quot;${partcover.dir}/PartCover.Browser.exe&quot; /32BIT+ /Force /nologo" />      
    -->
    <regasm>
      <assemblies>
        <include name="${partcover.dir}/PartCover.exe" />
        <include name="${partcover.dir}/PartCover.Browser.exe" />
  
        <include name="${partcover.dir}/Interop.PartCover.dll" />
        <include name="${partcover.dir}/PartCover.dll" />
        <include name="${partcover.dir}/PartCover.CorDriver.dll" />
        <include name="${partcover.dir}/PartCover.Framework.dll" />
      </assemblies>
    </regasm>
  </target>
  ]]>

  
  <script language="C#" prefix="my" >
    <references>
      <include name="System.dll" />
      <include name="System.Core.dll" />
    </references>
    <imports>
      <import namespace="System.Text.RegularExpressions" />
      <import namespace="System.Collections.Generic" />
      <import namespace="System.Linq" />
    </imports>
    <code>
      <![CDATA[
        [Function("merge-settings")]
        public string MergeSettings(string input)
        {
          var settings = new Dictionary<string, string>();
          var regex = new Regex(@"^([^,]*),""?(.*?)""?$", RegexOptions.Multiline);
          foreach (var each in input.Split(','))
          {
            var match = regex.Match(File.ReadAllText(each));
            while (match.Success)
            {
              if (!match.Groups[1].Value.StartsWith("#")) {
                if (settings.ContainsKey(match.Groups[1].Value.Trim()))
                  settings.Remove(match.Groups[1].Value.Trim());
                settings.Add(match.Groups[1].Value.Trim(), match.Groups[2].Value.Trim());
              }
              match = match.NextMatch();
            }
          }

          var keys = settings.Keys.ToList();
          keys.Sort();
     
          var builder = new StringBuilder();
          foreach (var each in keys)
            builder.AppendLine(each + "," + settings[each]);
          return builder.ToString();
        }
     
        [Function("generate-settings-dml")]
        public string GenerateSettingsDml(string input)
        {
          var builder = new StringBuilder();
          builder.AppendLine("USE [${sql.database-name}];");
          builder.AppendLine();
          builder.AppendLine("SET ANSI_NULLS ON;");
          builder.AppendLine();
          builder.AppendLine("SET QUOTED_IDENTIFIER ON;");
          builder.AppendLine();
          
          var regex = new Regex(@"^([^,]*),""?(.*?)""?$", RegexOptions.Multiline);
          var match = regex.Match(File.ReadAllText(input));
          var id = 1;
          while (match.Success)
          {
            builder.AppendLine("insert into [Setting] ([Id], [Version], [Key], [StringValue])");
            builder.AppendLine(String.Format("  values ({0}, 1, '{1}', '{2}');",
              id++, match.Groups[1].Value, match.Groups[2].Value.Trim()));
            match = match.NextMatch();
          }
          return builder.ToString();
        }
      ]]>
    </code>
  </script>
  
  
</project>
